import random
import pandas as pd
from models.recipe_entry import RecipeEntry
from services import ConfigurationService, DataService
from itertools import zip_longest

class RecipeService():
    configuration_service: ConfigurationService = None
    data_service: DataService = None

    def __init__(
            self,
            configuration_service: ConfigurationService,
            data_service: DataService):
        self.configuration_service = configuration_service
        self.data_service = data_service

    def create_recipe(self) -> list[RecipeEntry]:
        '''
        Returns a recipe represented as a list of RecipeEntry
        '''

        food_ids = self.data_service.unique_fdc_ids
        food_ids_length = len(food_ids)
        reqd_base_ingredient_ids = self.configuration_service.required_base_foods

        ingredients = list(map(
            lambda _: food_ids[random.choice(range(food_ids_length))],
            # One less because one slot is required for the base ingredient
            range(self.configuration_service.recipe_size - 1))
        ) + [
            # Reserved slot for required base ingredient
            reqd_base_ingredient_ids[random.choice(range(len(reqd_base_ingredient_ids)))]
        ]

        portions = list(map(
            lambda _: random.choice(range(1, 283)) / 100,
            range(self.configuration_service.recipe_size))
        )

        return list([RecipeEntry(a[0], a[1]) for a in zip_longest(ingredients, portions)])

    def get_nutrient_report(self, recipe: list[RecipeEntry]):
        '''
        Given a recipe in the format generated by create_recipe(), return a nutrient
        key-value pair weighted by the amount of the ingredient in the recipe.
        '''

        kvNutrientAmounts = {}

        for recipe_item in recipe:
            recipe_amount = recipe_item.percent_100_grams
            nutrient_info = self._get_nutrients_for_100g_item(recipe_item.fdc_id).copy(deep=True)
            for nutrient in nutrient_info.itertuples(index=True):
                nutrientId = nutrient[0]
                nutrientAmount = nutrient[4] * recipe_amount
                if nutrientAmount > 0:
                    if nutrientId in kvNutrientAmounts:
                        kvNutrientAmounts[nutrientId] += nutrientAmount
                    else:
                        kvNutrientAmounts[nutrientId] = nutrientAmount

        return kvNutrientAmounts

    def _get_nutrients_for_100g_item(self, fdc_id):
        '''
        Returns the set of nutrients in the requested FDC entry, with
        amounts per 100g of said entry.
        '''
        nutrients_in_fdc_item = self.data_service.get_food_nutrients(fdc_id)
        nutrients = self.data_service.get_nutrients(nutrients_in_fdc_item.index)

        amounts_per_100g = nutrients_in_fdc_item['amount']

        return nutrients.join(amounts_per_100g)
